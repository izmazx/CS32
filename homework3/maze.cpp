//
//  maze.cpp
//  homework3
//
//  Created by Izma Zuberi on 5/3/22.
//
#include <string>
#include <cassert>
using namespace std;

bool pathExists(char maze[][10], int sr, int sc, int er, int ec)
{
    if (sr == er && sc == ec)
        return true;

    maze[sr][sc] = '#';

    if (maze[sr + 1][sc] == '.')
        if (pathExists(maze, sr + 1, sc, er, ec))
            return true;
    if (maze[sr][sc - 1] == '.')
        if (pathExists(maze, sr, sc - 1, er, ec))
            return true;
    if (maze[sr - 1][sc] == '.')
        if (pathExists(maze, sr - 1, sc, er, ec))
            return true;
    if (maze[sr][sc + 1] == '.')
        if (pathExists(maze,  sr, sc + 1, er, ec))
            return true;

    return false;
}

int main()
{
    char maze1[10][10] = {
      { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
      { 'X', '.', 'X', '.', '.', 'X', '.', '.', '.', 'X' },
      { 'X', '.', 'X', 'X', '.', 'X', '.', 'X', 'X', 'X' },
      { 'X', '.', '.', '.', '.', 'X', '.', 'X', '.', 'X' },
      { 'X', 'X', '.', 'X', '.', 'X', '.', '.', '.', 'X' },
      { 'X', 'X', 'X', '.', '.', 'X', '.', 'X', '.', 'X' },
      { 'X', '.', '.', '.', 'X', '.', '.', '.', 'X', 'X' },
      { 'X', '.', 'X', 'X', '.', '.', 'X', '.', 'X', 'X' },
      { 'X', '.', '.', '.', '.', 'X', '.', '.', '.', 'X' },
      { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
    };

    char maze2[10][10] = {
      { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
      { 'X', '.', 'X', '.', '.', 'X', '.', '.', '.', 'X' },
      { 'X', 'X', 'X', 'X', '.', 'X', '.', 'X', 'X', 'X' },
      { 'X', '.', '.', '.', '.', 'X', '.', 'X', '.', 'X' },
      { 'X', 'X', '.', 'X', '.', 'X', '.', '.', '.', 'X' },
      { 'X', 'X', 'X', '.', '.', 'X', '.', 'X', '.', 'X' },
      { 'X', '.', '.', '.', 'X', '.', '.', '.', 'X', 'X' },
      { 'X', '.', 'X', 'X', '.', '.', 'X', '.', 'X', 'X' },
      { 'X', '.', '.', '.', '.', 'X', '.', '.', '.', 'X' },
      { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
    };

    char maze3[10][10] = {
      { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
      { 'X', 'X', '.', '.', '.', '.', '.', 'X', 'X', 'X' },
      { 'X', '.', '.', 'X', 'X', '.', '.', '.', '.', 'X' },
      { 'X', '.', '.', '.', 'X', '.', '.', '.', 'X', 'X' },
      { 'X', '.', 'X', '.', 'X', 'X', 'X', '.', '.', 'X' },
      { 'X', 'X', 'X', 'X', '.', '.', 'X', '.', '.', 'X' },
      { 'X', 'X', '.', '.', '.', '.', 'X', '.', '.', 'X' },
      { 'X', '.', '.', '.', '.', '.', '.', '.', 'X', 'X' },
      { 'X', '.', '.', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
      { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
    };

    char maze4[10][10] = {
      { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
      { 'X', 'X', '.', '.', '.', '.', '.', 'X', 'X', 'X' },
      { 'X', '.', '.', 'X', 'X', '.', '.', '.', '.', 'X' },
      { 'X', '.', '.', '.', 'X', '.', '.', '.', 'X', 'X' },
      { 'X', '.', 'X', '.', 'X', 'X', 'X', '.', '.', 'X' },
      { 'X', 'X', 'X', 'X', '.', '.', 'X', '.', '.', 'X' },
      { 'X', 'X', '.', '.', '.', '.', 'X', '.', '.', 'X' },
      { 'X', '.', 'X', '.', '.', '.', '.', '.', 'X', 'X' },
      { 'X', '.', '.', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
      { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
    };
    
    assert(pathExists(maze1,  8, 6, 1, 1));
    assert(!pathExists(maze2,  8, 6, 1, 1));
    assert(pathExists(maze3,  4, 3, 7, 1));
    assert(!pathExists(maze4,  4, 3, 7, 1));

}
